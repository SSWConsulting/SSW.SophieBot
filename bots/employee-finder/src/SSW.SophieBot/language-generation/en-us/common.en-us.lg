[Icons](icons.en-us.lg)

# MoreBookingInfoButton()
-```
{
    "type": "ActionSet",
    "actions": [
        ${MoreBookingInfoAction()}
    ]
}
```

# MoreBookingInfoAction()
-```
{
    "type": "Action.OpenUrl",
    "title": "ðŸ“ˆ More Booking Info",
    "url": "${settings.App.CRMBookingEndpoint}"
}
```

# ChatInTeamsAction(emailAddress)
-```
{
    "type": "Action.OpenUrl",
    "title": "ðŸ’¬ Chat in Teams",
    "url": "sip:${emailAddress}"
}
```

# ViewBookingsAction(displayName, bookedDays, sourceIntent)
- ```
{
    "type": "Action.Submit",
    "title": "ðŸ“… View Bookings",
    "data": 
    {
        "intent": "GetCalendar",
        "contact": ${dialog.nameEntity},
        ${IntentRedirectTelemetry('ViewBookings', sourceIntent, 'View Bookings')},
        "msteams": {
            "type": "messageBack",
			"displayText": "Show bookings for ${displayName} ${BookedDaysText(bookedDays)}"
        }
    }
}
```

# ViewProfileCardAction(firstName, lastName, sourceIntent)
- ```
{
    "type": "Action.Submit",
    "title": "ðŸ‘¤ View Profile Card",
    "data": 
    {
        "intent": "GetProfile",
        ${IntentRedirectTelemetry('ViewProfileCard', sourceIntent, 'View Profile Card')},
        "contact": {
            "firstName": [
                "${firstName}"
            ],
            "lastName": [
                "${lastName}"
            ]
        },
        "msteams": {
            "type": "messageBack",
            "displayText": "${firstName} ${lastName}"
        }
    }
}
```

# BookedDaysText(bookedDays)
- IF: ${bookedDays > 0}
    - (${bookedDays} days booked ðŸ—“)
- ELSE:
    - 

# IntentRedirectTelemetry(actionType, sourceIntent, action)
- ```
"redirect": {
    "actionType": "${actionType}",
    "sourceIntent": "${sourceIntent}",
    "action": "${action}"
}
```

# IsNonEmptyString(str)
- ${ exists(str) && length(trim(str)) > 0 }

# Avatar(avatarUrl, firstName, lastName, columnWidth, avatarSize)
- ```
{
    "type": "Column",
    "width": "${columnWidth}",
    "items": [
        {
            "type": "Image",
            "url": "${if(avatarUrl != null, avatarUrl, BlankAvatar())}",
            "width": "${avatarSize}",
            "height": "${avatarSize}",
            "style": "Person"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# DaysText(days, useDash)
- IF: ${exists(days) && days > 1}
    - ```${days} days```
- ELSEIF: ${exists(days) && days > 0}
    - ```${days} day```
- ELSEIF: ${(!exists(days) || days <= 0) && !useDash}
    - ```${days} day```
- ELSE:
    - ```â€”```

# ClickableName(displayName, firstName, lastName, columnWidth, fontSize, spacing, sourceIntent)
- ```
{
    "type": "Column",
    "width": "${columnWidth}",
    "spacing": "${spacing}",
    "items": [
        {
            "type": "TextBlock",
            "text": "${displayName}",
            "size": "${fontSize}",
            "wrap": true
        }
    ],
    "verticalContentAlignment": "Center",
    "selectAction": {
        "type": "Action.Submit",
        "data": {
            "intent": "GetProfile",
            ${IntentRedirectTelemetry('ClickableName', sourceIntent, displayName)},
            "contact": {
                "firstName": [
                    "${firstName}"
                ],
                "lastName": [
                    "${lastName}"
                ]
            },
            "msteams": {
                "type": "messageBack",
                "displayText": "${firstName} ${lastName}"
            }
        }
    }
}
```

# Pagination(current, total)
-```
{
    "type": "TextBlock",
    "text": "${PaginationText(current, total)}",
    "wrap": true,
    "size": "Medium",
    "weight": "Bolder"
}
```

# PaginationText(current, total)
- Page ${current} ${PageRange(current, total)}

# PageRange(current, total)
- IF: ${ 10 * (current - 1) + 1 == 10 * (current - 1) + if(total >= current * 10, 10, total - 10 * (current - 1))}
    - (${10 * (current - 1) + 1})
- ELSE:
    - (${10 * (current - 1) + 1}-${10 * (current - 1) + if(total >= current * 10, 10, total - 10 * (current - 1))})


# NameButtons(targetIntent, sourceIntent)
- ```
{
    "type": "AdaptiveCard",
    "body": [
        {
            "type": "TextBlock",
            "wrap": true,
            "text": "There seems to be more than one **${titleCase(turn.userInputName)}**. Which one were you looking for?"
        },
        {
            "type": "ActionSet",
            "actions": [
                ${join(select(take(turn.employees, 6), employee, NameButton(targetIntent, sourceIntent, employee.firstName, employee.lastName)), ',')}
            ],
            "height": "stretch"
        }
    ],
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2"
}
```

# NameButton(targetIntent, sourceIntent, firstName, lastName)
- ```
{
    "type": "Action.Submit",
    "title": "${firstName} ${lastName}",
    "data": {
        "intent": "${targetIntent}",
        ${IntentRedirectTelemetry('NameButton', sourceIntent, concat(firstName, ' ', lastName))},
        "contact": {
            "firstName": [
                "${firstName}"
            ],
            "lastName": [
                "${lastName}"
            ]
        },
        "msteams": {
            "type": "messageBack",
            "displayText": "${firstName} ${lastName}"
        }
    }
}
```

# BilledHeader(text, width, alignment)
-```
{
    "type": "Column",
    "width": "${width}",
    "items": [
        {
            "type": "TextBlock",
            "text": "${text}",
            "wrap": true,
            "weight": "Bolder",
            "horizontalAlignment": "${alignment}"
        },
        {
            "type": "TextBlock",
            "text": "(Last 30 days)",
            "size": "Small",
            "wrap": true,
            "spacing": "None",
            "horizontalAlignment": "${alignment}"
        }
    ]
}
```

# SendActivity_8fHHcb()
[Activity
    Text = ${SendActivity_8fHHcb_text()}
]

# SendActivity_8fHHcb_text()
- ```No worries, please send us an email with your feedback and screenshots to  [SSWSophieBotDevs@ssw.com.au](mailto:SSWSophieBotDevs@ssw.com.au)  <br/>  <br/>
  
We love squashing bugs ðŸ¥°```
# SendActivity_Ql6zUr()
[Activity
    Text = ${SendActivity_Ql6zUr_text()}
]

# SendActivity_Ql6zUr_text()
- ```Sorry, I could not answer that ðŸ˜­ <br/>
See sample questions ${settings.App.ProductUrl} <br/> <br/>
${IntranetInfo()}
```

# IntranetInfo()
- IF: ${exists(user.TenantAuthenticated) && user.TenantAuthenticated == true}
    - You can also search the SSW Intranet [sswcom.sharepoint.com](${settings.App.SharePointUrl}) <br/>
- ELSE:
    - 

# GetExpertsButtons(employees, skill, locations, sourceIntent, targetIntent)
-```
{
    "type": "ActionSet",
    "actions": [
        {
            "type": "Action.Submit",
            "title": "Show All [${employees.count}]",
            "data": {
                "intent": "${targetIntent}",
                ${IntentRedirectTelemetry('Filter', sourceIntent, concat('Show All [', employees.count, ']'))},
                "location": "All",
                "skill": "${skill}",
                "msteams": {
                    "type": "messageBack",
                    "displayText": "Show All [${count(employees)}]"
                }
            }
        },
        ${join(select(subArray(locations, 0, if(count(locations) >= 5, 5, count(locations))), location => GetExpertButton(skill, location, Count(location, employees), sourceIntent, targetIntent)), ',')}
    ]
},
{
    "type": "ActionSet",
    "actions": [
        ${join(select(if(count(locations) > 5, subArray(locations, 5, count(locations)), []), location => GetExpertButton(skill, location, Count(location, employees), sourceIntent, targetIntent)), ',')}
    ]
}
```

# GetExpertButton(skill, location, number, sourceIntent, targetIntent)
-``` 
{
    "type": "Action.Submit",
    "title": "${location} [${number}]",
    "data": {
        "intent": "${targetIntent}",
        ${IntentRedirectTelemetry('Filter', sourceIntent, concat(location, ' [', number, ']'))},
        "skill": "${skill}",
        "location": "${location}",
        "msteams": {
            "type": "messageBack",
	        "displayText": "${location} [${number}]"
        }
    }
}
```

# Count(location, employees)
- ${count(where(employees, employee => employee.defaultSite.name == location))}
# SendActivity_LOOiml_text()
- Getting free day is still a work in progress.
# SendActivity_LOOiml()
[Activity
    Text = ${SendActivity_LOOiml_text()}
]

# GetNextTitle(pageIndex, pageSize)
- ${PaginationText(pageIndex, count(turn.employees))}

# GetAuthenticationMaskedColumn(originalText, id, warningId)
- IF: ${exists(user.TenantAuthenticated) && user.TenantAuthenticated == true}
	- ```
	{
	    "type": "ColumnSet",
	    "columns": [
	        {
	            "type": "Column",
	            "width": "stretch",
	            "items": [
	                {
	                    "type": "TextBlock",
	                    "text": "${originalText}",
	                    "wrap": true
	                }
	            ]
	        },
	        {
	            "type": "Column",
	            "width": "stretch",
	            "items": [
	                {
	                    "type": "TextBlock",
	                    "text": "< Hide",
	                    "wrap": true,
	                    "color": "Accent"
	                }
	            ],
	            "selectAction": {
	                "type": "Action.ToggleVisibility",
	                "targetElements": [
	                    "${concat('o-', id)}",
	                    "${concat('s-', id)}"
	                ]
	            }
	        }
	    ],
	    "isVisible": false,
	    "horizontalAlignment": "Right",
	    "id": "${concat('o-', id)}"
	},
	{
	    "type": "ColumnSet",
	    "columns": [
	        {
	            "type": "Column",
	            "width": "stretch",
	            "items": [
	                {
	                    "type": "TextBlock",
	                    "text": "\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*",
	                    "wrap": true
	                }
	            ]
	        },
	        {
	            "type": "Column",
	            "width": "stretch",
	            "items": [
	                {
	                    "type": "TextBlock",
	                    "text": "Show >",
	                    "wrap": true,
	                    "color": "Accent"
	                }
	            ],
	            "selectAction": {
	                "type": "Action.ToggleVisibility",
	                "targetElements": [
	                    "${concat('o-', id)}",
	                    "${concat('s-', id)}"
	                ]
	            }
	        }
	    ],
	    "horizontalAlignment": "Right",
	    "id": "${concat('s-', id)}"
	}
	```
- ELSE:
	- ```
	{
	    "type": "ColumnSet",
	    "columns": [
	        {
	            "type": "Column",
	            "width": "stretch",
	            "items": [
	                {
	                    "type": "TextBlock",
	                    "text": "\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*\\\\*",
	                    "wrap": true
	                }
	            ]
	        },
	        {
	            "type": "Column",
	            "width": "stretch",
	            "items": [
	                {
	                    "type": "TextBlock",
	                    "text": "Show >",
	                    "wrap": true,
	                    "color": "Accent"
	                }
	            ],
	            "selectAction": {
	                "type": "Action.ToggleVisibility",
                    "targetElements": [
						{
						    "elementId": "${warningId}",
						    "isVisible": true
						}
					]
	            }
	        }
	    ],
	    "horizontalAlignment": "Right"
	}
	```

# UsageByUserReport(usage)
- ```
{
    "type": "AdaptiveCard",
    "body": [
        {
            "type": "ColumnSet",
            "columns": [
                {
                    "type": "Column",
                    "width": "stretch",
                    "items": [
                        {
                            "type": "TextBlock",
                            "text": "Usage by User",
                            "wrap": true,
                            "size": "ExtraLarge"
                        }
                    ]
                }
            ]
        },
        {
            "type": "FactSet",
            "facts": [
                {
                    "title": "ðŸ“†",
                    "value": "Last month"
                }
            ]
        },
        {
            "type": "Container",
            "items": [
                ${join(select(usage, item, UsageByUserReportRow(item, first(usage).usageCount)), ',')}
            ],
            "spacing": "Medium"
        },
        {
            "type": "TextBlock",
            "text": "See more at [Azure Workbook](${settings.App.AppInsights.WorkbookLink})",
            "wrap": true,
            "horizontalAlignment": "Right",
            "size": "Small",
            "spacing": "Medium"
        }
    ],
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2"
}
```

# GetFirstName(displayName)
- IF: ${count(split(trim(displayName), ' ')) > 0}
	- ```${split(displayName, ' ')[0]}```
- ELSE: 
	- ``````

# GetLastName(displayName)
- IF: ${count(split(trim(displayName), ' ')) > 1}
	- ```${split(displayName, ' ')[1]}```
- ELSE: 
	- ``````

# UsageByUserReportRow(usageItem, maxCount)
- ```
{
    "type": "ColumnSet",
    "columns": [
		${ClickableName(
			replace(usageItem.userName, ' www.ssw.com.au', ''), 
			GetFirstName(replace(usageItem.userName, ' www.ssw.com.au', '')), 
			GetLastName(replace(usageItem.userName, ' www.ssw.com.au', '')), 
			'stretch', 
			'Default', 
			'Default', 
			'GetUsageByUser')},
        {
            "type": "Column",
            "items": [
                {
                    "type": "ColumnSet",
                    "columns": [
						${GetUsageBarColumn(round(130/maxCount*usageItem.usageCount))}
                    ]
                }
            ],
            "width": "stretch",
            "verticalContentAlignment": "Center"
        },
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "text": "${usageItem.usageCount}",
                    "wrap": true
                }
            ],
            "verticalContentAlignment": "Center"
        }
    ]
}
```

# GetUsageBarColumn(px)
- IF: ${px >= 32}
	- ```
	{
        "type": "Column",
        "backgroundImage": {
            "verticalAlignment": "Center",
            "fillMode": "RepeatHorizontally",
            "url": "${settings.App.BaseUrl}/Images/bar-unit.png"
        },
        "width": "${px + 'px'}",
		"items": []
    }
	```
- ELSE:
	- ```
	{
        "type": "Column",
        "backgroundImage": {
            "verticalAlignment": "Center",
            "fillMode": "RepeatHorizontally",
            "url": "${settings.App.BaseUrl + '/Images/bar-' + max(px, 1) + 'px.png'}"
        },
        "width": "1px",
		"items": []
    }
	```
