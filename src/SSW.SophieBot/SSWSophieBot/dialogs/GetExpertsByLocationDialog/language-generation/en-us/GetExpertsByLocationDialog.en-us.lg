[import](common.lg)
[Icons](icons.en-us.lg)
[BillableList](billableList.en-us.lg)
[SSWSophieBot](SSWSophieBot.en-us.lg)

# SendActivity_emJef2()
[Activity
    Text = ${SendActivity_emJef2_text()}
]

# SendActivity_emJef2_text()
- I got an error: ${turn.statusCode} ${turn.reasonPhrase}.
# SendActivity_LcKuck()
[Activity
    Attachments = ${json(WorkingEmployeesList(dialog.locationEntity, dialog.foreach.page))}
]

# SendActivity_WXSOyK()
[Activity
    Attachments = ${json(BillableEmployeesList(
        if(dialog.foreach.pageindex == 1, dialog.billableTitle, GetNextTitle(dialog.foreach.pageindex, 10)), 
        turn.clientNow,
        if(dialog.foreach.pageindex == 1, true, false),
        dialog.foreach.page,
        dialog.foreach.pageindex * 10 >= count(turn.billableEmployees.employees),
        false))}
]

# GetNextTitle(pageIndex, pageSize)
- ${PaginationText(pageIndex, count(turn.employees))}

# WorkingEmployeesList(location, employees)
-```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2",
    "body": [
        ${join(where(createArray(SkillCardHeader(location, count(turn.employees)), EmployeeList(employees)), item => item != ''), ',')}
    ]
}
```

# SkillCardHeader(location, count)
- IF: ${ dialog.foreach.pageindex == 1 || count <= 10 }
    - ```
    {
        "type": "TextBlock",
        "text": "${dialog.skillEntity} - ${if(location != null, titleCase(location), 'All')} [${count}]",
        "wrap": true,
        "size": "ExtraLarge",
        "weight": "Bolder"
    }
    ```
- ELSE:
    - ${Pagination(dialog.foreach.pageindex, count(turn.employees))}

# EmployeeList(employees)
-```
{
    "type": "ColumnSet",
    "columns": [
        ${ColumnHeaders(count(employees))}
    ],
    "style": "default"
},
{
    "type": "Container",
    "items": [${join(select(employees, e, EmployeeRow(e)), ',')}],
}
```

# ColumnHeaders(pageCount)
- IF: ${ dialog.foreach.pageindex == 1 || pageCount <= 10 }
    - ```
    {
        "type": "Column",
        "width": "50px",
        "items": []
    },
    {
        "type": "Column",
        "width": "stretch",
        "items": []
    },
    {
        "type": "Column",
        "width": "stretch",
        "items": [
            {
                "type": "TextBlock",
                "text": "Level â†“",
                "wrap": true,
                "weight": "Bolder",
                "horizontalAlignment": "Center"
            }
        ]
    },
    ${BilledHeader('Billed', 'stretch', 'Center')}
    ```
- ELSE:
    -

# EmployeeRow(employee)
- ```
{
    "type": "ColumnSet",
    "columns": [
        ${ClickableAvatar(employee.avatarUrl, employee.firstName, employee.lastName, '50px', '35px')},
        ${ClickableName(concat(employee.firstName, ' ', employee.lastName), employee.firstName, employee.lastName, 'stretch', 'Small', 'Default')},
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "wrap": true,
                    "text": "${employee.skillLevel}",
                    "size": "Small",
                    "horizontalAlignment": "Center"
                }
            ],
            "verticalContentAlignment": "Center"
        },
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "wrap": true,
                    "text": "${DaysText(first(where(turn.billableEmployees.employees, e, e.userId == employee.UserId)).billedDays, true)}",
                    "size": "Small",
                    "horizontalAlignment": "Center"
                }
            ],
            "verticalContentAlignment": "Center"
        }
    ],
    "height": "stretch",
    "separator": true
}
```
# SendActivity_HNg6Pg()
[Activity
    Text = ${SendActivity_HNg6Pg_text()}
]

# SendActivity_HNg6Pg_text()
- Sorry, I don't know the place you are talking about.

# SendActivity_WQzWA6()
[Activity
    Text = ${SendActivity_WQzWA6_text()}
]

# SendActivity_WQzWA6_text()
- Sorry, I couldn't find anyone with ${dialog.skillEntity} skill in ${dialog.locationEntity} office. I will let you in on a secret. No one in the company has ${dialog.skillEntity} skills!
# SendActivity_hKyyQH()
[Activity
    Text = ${SendActivity_hKyyQH_text()}
]

# SendActivity_hKyyQH_text()
- Bye~

# ConfirmInput_Prompt_V36UxP()
[Activity
    Text = ${ConfirmInput_Prompt_V36UxP_text()}
]

# ConfirmInput_Prompt_V36UxP_text()
- Sorry, I couldn't find anyone with ${dialog.skillEntity} skills in ${dialog.locationEntity} office. However, I did find ${turn.employees.count} person in the rest of the company. Do you want to query all offices?
