[import](common.lg)
[Icons](icons.en-us.lg)

# SendActivity_0L7CNj()
[Activity
    Text = ${SendActivity_0L7CNj_text()}
]

# SendActivity_0L7CNj_text()
- I got an error: ${turn.statusCode} ${turn.reasonPhrase}.
# SendActivity_sftkhO()
[Activity
    Text = ${SendActivity_sftkhO_text()}
]

# SendActivity_sftkhO_text()
- Sorry, I couldn't find anyone with **${dialog.skillEntity}** skill in **${dialog.locationEntity}** on **${turn.formatDate}**. Please try again.


# SendActivity_6uyLeH()
[Activity
    Attachments = ${json(EmployeesListCard(turn.formatDate, dialog.skillEntity, dialog.locationEntity, dialog.foreach.page))}
]

# EmployeesListCard(date, skill, location, employees)
- ```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2",
    "body": [
        ${join(where(createArray(Title(date, skill, location), EmployeesList(employees), Footer()), item => item != ''), ',')}
    ]
}
```

# Title(date, skill, location)
- IF: ${ dialog.foreach.pageindex == 1 }
    - ```
    {
        "type": "ColumnSet",
        "columns": [
            {
                "type": "Column",
                "items": [
                    {
                        "type": "TextBlock",
                        "text": "${location} - ${skill} [${count(turn.employees)}]",
                        "wrap": true,
                        "size": "Large"
                    },
                    {
                        "type": "TextBlock",
                        "text": "${date}",
                        "wrap": true,
                        "isSubtle": true
                    }
                ],
                "width": "stretch"
            }
        ]
    }
    ```
- ELSE:
    - ``````

# Footer()
- IF: ${ dialog.foreach.pageindex == ceiling(div(count(turn.employees), float('15.0'))) }
    - ```
    {
        "type": "ActionSet",
        "actions": [
            {
                "type": "Action.OpenUrl",
                "title": "ðŸ“ˆ More Booking Info",
                "url": "${settings.CRMBookingEndpoint}"
            }
        ]
    }
    ```
- ELSE:
    -

# EmployeesList(employees)
- ```
{
    "type": "ColumnSet",
    "columns": [
        ${HeaderColumns()}
    ],
    "style": "default"
},
{
    "type": "Container",
    "items": [${join(select(employees, employee => EmployeeRow(employee)), ',')}]
}
```

# HeaderColumns()
-```
{
    "type": "Column",
    "width": "75px",
    "items": []
},
{
    "type": "Column",
    "width": "stretch",
    "items": [
        {
            "type": "TextBlock",
            "text": "Name",
            "wrap": true,
            "weight": "Bolder"
        }
    ],
    "verticalContentAlignment": "Center"
},
{
    "type": "Column",
    "width": "stretch",
    "items": [
        {
            "type": "TextBlock",
            "text": "Availability",
            "wrap": true,
            "weight": "Bolder"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# EmployeeRow(employee)
- ```
{
    "type": "ColumnSet",
    "columns": [
        ${BodyColumns(employee)}
    ],
    "height": "stretch",
    "separator": true
}
```

# NextClient(client)
-```
Only free for ${client.FreeDays} ${if(client.FreeDays <= 1, 'day', 'days')}
```

# AvatarColumn(avatarUrl)
-```
{
    "type": "Column",
    "width": "75px",
    "items": [
        {
            "type": "Image",
            "width": "35px",
            "height": "35px",
            "url": "${if(avatarUrl != null, avatarUrl, BlankAvatar())}",
            "style": "Person"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# BodyColumns(employee)
- ${join(createArray(
   AvatarColumn(employee.avatarUrl), 
   BodyColumn(employee.displayName), 
   BodyColumn(if(employee.NextClient != null, NextClient(employee.NextClient), 'â€”'))), ',')}

# BodyColumn(text)
-```
{
    "type": "Column",
    "width": "stretch",
    "items": [
        {
            "type": "TextBlock",
            "text": "${text}",
            "wrap": true,
            "size": "Small"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# SendActivity_5xlJLh()
[Activity
    Text = ${SendActivity_5xlJLh_text()}
]

# SendActivity_5xlJLh_text()
- Sorry, I don't know the place you are talking about.
# SendActivity_C1DsiX()
[Activity
    Text = ${SendActivity_C1DsiX_text()}
]

# SendActivity_C1DsiX_text()
- I got an error: ${turn.statusCode} ${turn.reasonPhrase}.
# SendActivity_ZsXIV2()
- ${Typing()}