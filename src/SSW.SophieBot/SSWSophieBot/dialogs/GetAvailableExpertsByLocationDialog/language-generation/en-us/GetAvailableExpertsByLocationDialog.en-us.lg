[import](common.lg)
[Icons](icons.en-us.lg)

# SendActivity_0L7CNj()
[Activity
    Text = ${SendActivity_0L7CNj_text()}
]

# SendActivity_0L7CNj_text()
- I got an error: ${turn.statusCode} ${turn.reasonPhrase}.
# SendActivity_sftkhO()
[Activity
    Text = ${SendActivity_sftkhO_text()}
]

# SendActivity_sftkhO_text()
- Sorry, I couldn't find anyone with **${dialog.skillEntity}** skill in **${dialog.locationEntity}** on **${turn.formatDate}**. Please try again.


# SendActivity_U8Xbbw()
[Activity
    Attachments = ${json(EmployeesListCard(turn.formatDate, dialog.skillEntity, dialog.locationEntity, turn.employees))}
]

# EmployeesListCard(date, skill, location, employees)
- ```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2",
    "body": [
        {
            "type": "ColumnSet",
            "columns": [
                {
                    "type": "Column",
                    "items": [
                        {
                            "type": "TextBlock",
                            "text": "${date}",
                            "wrap": true,
                            "size": "Large"
                        },
                        {
                            "type": "TextBlock",
                            "text": "${skill} | ${location}",
                            "wrap": true,
                            "isSubtle": true
                        }
                    ],
                    "width": "stretch"
                }
            ]
        },
        ${EmployeesList(employees)},
        {
            "type": "ActionSet",
            "actions": [
                {
                    "type": "Action.OpenUrl",
                    "title": "More Booking Info",
                    "url": "${settings.CRMBookingEndpoint}"
                }
            ]
        }
    ]
}
```

# EmployeesList(employees)
- ```
{
    "type": "ColumnSet",
    "columns": [
        ${HeaderColumns()}
    ],
    "style": "default"
},
{
    "type": "Container",
    "items": [${join(select(employees, employee => EmployeeRow(employee)), ',')}]
}
```

# HeaderColumns()
-```
{
    "type": "Column",
    "width": "75px",
    "items": []
},
{
    "type": "Column",
    "width": "stretch",
    "items": [
        {
            "type": "TextBlock",
            "text": "Name",
            "wrap": true,
            "weight": "Bolder"
        }
    ],
    "verticalContentAlignment": "Center"
},
{
    "type": "Column",
    "width": "stretch",
    "items": [
        {
            "type": "TextBlock",
            "text": "Next client",
            "wrap": true,
            "weight": "Bolder"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# EmployeeRow(employee)
- ```
{
    "type": "ColumnSet",
    "columns": [
        ${BodyColumns(employee)}
    ],
    "height": "stretch",
    "separator": true
}
```

# NextClient(client)
-```
Free for ${client.FreeDays} ${if(client.FreeDays <= 1, 'day', 'days')}.  
Working for ${client.Name} - ${client.Date}.
```

# AvatarColumn(avatarUrl)
-```
{
    "type": "Column",
    "width": "75px",
    "items": [
        {
            "type": "Image",
            "width": "35px",
            "height": "35px",
            "url": "${if(avatarUrl != null, avatarUrl, BlankAvatar())}",
            "style": "Person"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# BodyColumns(employee)
- ${join(createArray(
   AvatarColumn(employee.avatarUrl), 
   BodyColumn(employee.displayName), 
   BodyColumn(if(employee.NextClient != null, NextClient(employee.NextClient), ''))), ',')}

# BodyColumn(text)
-```
{
    "type": "Column",
    "width": "stretch",
    "items": [
        {
            "type": "TextBlock",
            "text": "${text}",
            "wrap": true,
            "size": "Small"
        }
    ],
    "verticalContentAlignment": "Center"
}
```
# SendActivity_UhaM70()
[Activity
    Text = ${SendActivity_UhaM70_text()}
]

# SendActivity_UhaM70_text()
- ${dialog.firstNames} ${if(count(turn.employees) > 1, 'are', 'is')} not on client work