[import](common.lg)
[Icons](icons.en-us.lg)

# SendActivity_7cnUNi()
[Activity
    Attachments = ${json(ListCard(turn.firstNames, turn.employees, turn.locations))}
]

# ListCard(firstNames, employees, locations)
-```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2",
    "body": [
        {
            "type": "TextBlock",
            "text": "${NameList(firstNames, count(employees))} are on client work${DateInfo(turn.formatDate)}.",
            "wrap": true
        },
        {
            "type": "TextBlock",
            "text": "You can narrow your search by specifying an office location.\n",
            "wrap": true
        },
        {
            "type": "ActionSet",
            "actions": [
                {
                    "type": "Action.Submit",
                    "title": "Show All [${count(employees)}]",
                    "data": {
                        "intent": "GetPeopleOnClientWork",
                        "location": "All"
                    }
                },
                ${join(select(subArray(locations, 0, count(locations) <= 5 ? count(locations) : 5), location => LocationButton(location, Number(location, employees))), ',')}
            ]
        },
        {
            "type": "ActionSet",
            "actions": [
                ${join(select(if(subArray(locations, 5, count(locations)) != null, subArray(locations, 5, count(locations)), createArray()), location => LocationButton(location, Number(location, employees))), ',')}
            ]
        }
    ]
}
```

# NameList(firstNames, peopleCount)
- IF: ${ peopleCount <= 4 }
    - ${firstNames}
- ELSE:
    - ${firstNames} and **${peopleCount - 3} others**

# DateInfo(date)
- ${if(date != null, DateText(date), '')}

# DateText(date)
-``` on ${date}```

# Number(location, employees)
- ${count(where(employees, employee => employee.defaultSite.name == location))}

# LocationButton(location, number)
-``` 
{
    "type": "Action.Submit",
    "title": "${location} [${number}]",
    "data": {
        "intent": "GetPeopleOnClientWork",
        "location": "${location}",
        "datetime": [
            {
            "timex": [
                "${dialog.dateEntity.timex[0]}"
            ],
            "type": "date"
            }
        ]
    }
}
```

# SendActivity_jZGZUb()
[Activity
    Text = ${SendActivity_jZGZUb_text()}
]
# SendActivity_jZGZUb_text()
- I got an error: ${turn.statusCode} ${turn.reasonPhrase}.

# SendActivity_AMPsi6()
[Activity
    Attachments = ${json(EmployeesListCard(dialog.locationEntity, turn.employees))}
]

# EmployeesListCard(location, employees)
-```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2",
    "body": [
        {
            "type": "TextBlock",
            "text": "${location}",
            "wrap": true,
            "size": "Large"
        },
        ${EmployeeList(employees)}
    ]
}
```

# EmployeeList(employees)
-```
{
    "type": "ColumnSet",
    "columns": [
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "text": "Name",
                    "wrap": true,
                    "weight": "Bolder"
                }
            ]
        },
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "text": "Client",
                    "wrap": true,
                    "weight": "Bolder"
                }
            ]
        }
    ],
    "style": "accent"
},
{
    "type": "Container",
    "items": [${join(select(employees, employee => EmployeeRow(employee)), ',')}]
}
```

# EmployeeRow(employee)
- ```
{
    "type": "ColumnSet",
    "columns": [
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "ColumnSet",
                    "columns": [
                        {
                            "type": "Column",
                            "width": "auto",
                            "items": [
                                {
                                    "type": "Image",
                                    "url": "${if(employee.avatarUrl != null, employee.avatarUrl, BlankAvatar())}",
                                    "width": "40px",
                                    "height": "40px",
                                    "style": "Person"
                                }
                            ]
                        },
                        {
                            "type": "Column",
                            "width": "stretch",
                            "items": [
                                {
                                    "type": "TextBlock",
                                    "text": "${employee.firstName} ${employee.lastName}",
                                    "wrap": true
                                }
                            ],
                            "verticalContentAlignment": "Center"
                        }
                    ]
                }
            ]
        },
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "text": "${if(count(employee.currentAppointments) != 0, employee.currentAppointments[0].Regarding, '')}",
                    "wrap": true
                }
            ],
            "verticalContentAlignment": "Center"
        }
    ],
    "height": "stretch",
    "separator": true
}
```

# SendActivity_pArEiW()
[Activity
    Text = ${SendActivity_pArEiW_text()}
]

# SendActivity_pArEiW_text()
- Sorry, I couldn't find anyone on Client${DateInfo(turn.formatDate)}. Please try again.

# LogAction_Text_8gWL4n()
[Activity
    Text = ${LogAction_Text_8gWL4n_text()}
]

# LogAction_Text_8gWL4n_text()
- ${turn.employees[dialog.profile.index].currentAppointments}