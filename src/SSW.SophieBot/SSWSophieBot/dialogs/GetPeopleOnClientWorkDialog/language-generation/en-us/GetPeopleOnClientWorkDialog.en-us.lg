[import](common.lg)
[Icons](icons.en-us.lg)
[SSWSophieBot](SSWSophieBot.en-us.lg)

# SendActivity_7cnUNi()
[Activity
    Attachments = ${json(ListCard(turn.firstNames, turn.employees, turn.locations))}
]

# ListCard(firstNames, employees, locations)
-```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2",
    "body": [
        {
            "type": "TextBlock",
            "text": "${PeopleType()} - All [${count(employees)}]",
            "wrap": true,
            "size": "ExtraLarge",
            "weight": "Bolder"
        },
        {
            "type": "TextBlock",
            "text": "${if(turn.formatDate != null, turn.formatDate, '')}",
            "wrap": true
        },
        {
            "type": "TextBlock",
            "text": "${firstNames}",
            "wrap": true
        },
        {
            "type": "TextBlock",
            "text": "Narrow your search...",
            "wrap": true
        },
        {
            "type": "ActionSet",
            "actions": [
                {
                    "type": "Action.Submit",
                    "title": "Show All [${count(employees)}]",
                    "data": {
                        "intent": "GetPeopleOnClientWork",
                        "available": "${dialog.availableEntity}",
                        "internal": "${dialog.internalEntity}",
                        "geographyV2": [
                            {
                                "location": "",
                                "type": "city"
                            }
                        ],
                        "datetime": [
                            {
                            "timex": [
                                "${dialog.fromDate}"
                            ],
                            "type": "date"
                            }
                        ],
                        "msteams": {
                            "type": "messageBack",
                            "displayText": "Show All [${count(employees)}]"
                        }
                    }
                },
                ${join(select(subArray(locations, 0, count(locations) <= 5 ? count(locations) : 5), location => LocationButton(location, Number(location, employees))), ',')}
            ]
        },
        {
            "type": "ActionSet",
            "actions": [
                ${join(select(if(subArray(locations, 5, count(locations)) != null, subArray(locations, 5, count(locations)), createArray()), location => LocationButton(location, Number(location, employees))), ',')}
            ]
        }
    ]
}
```

# LocationButton(location, number)
-``` 
{
    "type": "Action.Submit",
    "title": "${location} [${number}]",
    "data": {
        "intent": "GetPeopleOnClientWork",
        "available": "${dialog.availableEntity}",
        "internal": "${dialog.internalEntity}",
        "geographyV2": [
            {
                "location": "${location}",
                "type": "city"
            }
        ],
        "datetime": [
            {
            "timex": [
                "${dialog.fromDate}"
            ],
            "type": "date"
            }
        ],
        "msteams": {
            "type": "messageBack",
	        "displayText": "${location} [${number}]"
        }
    }
}
```

# Number(location, employees)
- ${count(where(employees, employee => employee.defaultSite.name == location))}

# SendActivity_jZGZUb()
[Activity
    Text = ${SendActivity_jZGZUb_text()}
]
# SendActivity_jZGZUb_text()
- I got an error: ${turn.statusCode} ${turn.reasonPhrase}.

# SendActivity_8Km7yc()
[Activity
    Attachments = ${json(EmployeesListCard(dialog.locationEntity, dialog.foreach.page))}
]

# EmployeesListCard(location, employees)
-```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "version": "1.2",
    "body": [
        ${join(where(createArray(Header(location), EmployeeList(employees), Footer()), item => item != ''), ',')}
    ]
}
```

# Header(location)
- IF: ${ dialog.foreach.pageindex == 1 }
    - ```
    {
        "type": "TextBlock",
        "text": "${PeopleType()} - ${if(location == '', 'All', location)} [${count(turn.employees)}]",
        "wrap": true,
        "size": "ExtraLarge",
        "weight": "Bolder"
    },
    {
        "type": "TextBlock",
        "text": "${if(turn.formatDate != null, turn.formatDate, '')}",
        "wrap": true
    }
    ```
- ELSE:
    - ```
    {
        "type": "TextBlock",
        "text": "Next ${if(dialog.foreach.pageindex * 10 < count(turn.employees), 10, count(turn.employees) - 10 * (dialog.foreach.pageindex - 1))}...",
        "wrap": true,
        "size": "Medium",
        "weight": "Bolder"
    }
    ```

# Footer()
- IF: ${ dialog.foreach.pageindex == ceiling(div(count(turn.employees), float('10.0'))) }
    - ```
    {
        "type": "ActionSet",
        "actions": [
            {
                "type": "Action.OpenUrl",
                "title": "ðŸ“ˆ More Booking Info",
                "url": "${settings.App.CRMBookingEndpoint}"
            }
        ]
    }
    ```
- ELSE:
    - ``````

# PeopleType()
- IF: ${ dialog.booked }
    - On Client Work
- ELSE:
    - On Internal Work

# EmployeeList(employees)
-```
{
    "type": "ColumnSet",
    "columns": [
        ${HeaderColumns()}
    ],
    "style": "default"
},
{
    "type": "Container",
    "items": [${join(select(employees, employee => EmployeeSet(employee)), ',')}]
}
```

# HeaderColumns
- IF: ${ dialog.foreach.pageindex != 1 }
    - 
- ELSEIF: ${ dialog.booked }
    - ${join(createArray(HeaderColumn('', '35px'), HeaderColumn('Name', '125px'), HeaderColumn('Client(s)', 'stretch')), ',')}
- ELSE:
    - ${join(createArray(HeaderColumn('', '35px'), HeaderColumn('Name', '110px'), HeaderColumn('Billed â†“', '67px'), HeaderColumn('In Office', '58px'), HeaderColumn('Last Seen', '80px')), ',')}

# HeaderColumn(text, width)
-```
{
    "type": "Column",
    "width": "${width}",
    "items": [
        {
            "type": "TextBlock",
            "text": "${text}",
            "wrap": true,
            "weight": "Bolder"
        }
    ]
}
```

# EmployeeSet(employee)
- IF: ${ dialog.booked }
    - ${EmployeeRow(employee)}
- ELSE:
    - ${join(createArray(EmployeeRow(employee), Note(employee)), ',')}

# EmployeeRow(employee)
- ```
{
    "type": "ColumnSet",
    "columns": [
        ${BodyColumns(employee)}
    ],
    "height": "stretch",
    "separator": true
}
```

# Note(employee)
-```
{
    "type": "ColumnSet",
    "columns": [
        ${HeaderColumn('', '35px')},
        {
            "type": "Column",
            "width": "stretch",
            "items": [
                {
                    "type": "TextBlock",
                    "text": "${if(employee.nextClient != null, NextClient(employee.nextClient, employee.freeDays), '')}",
                    "wrap": true,
                    "size": "Small"
                }
            ],
            "verticalContentAlignment": "Center"
        }
    ],
    "style": "default"
}
```

# BodyColumns(employee)
- IF: ${ dialog.booked }
    - ${join(createArray(
            ClickableAvatar(employee.avatarUrl, employee.firstName, employee.lastName, 'auto', '35px'), 
            ClickableName(employee.displayName, employee.firstName, employee.lastName, '125px', 'Small', 'Default'),
            ClientColumn(employee.clients, 'stretch')
        ), ',')}
- ELSE:
    - ${join(createArray(
            ClickableAvatar(employee.avatarUrl, employee.firstName, employee.lastName, 'auto', '35px'), 
            ClickableName(employee.displayName, employee.firstName, employee.lastName, '110px', 'Small', 'Default'),
            BodyColumn(DaysText(employee.BilledDays, true), '67px'), 
            ImageColumn(if(employee.InOffice, GreenCircle(), RedCircle())), BodyColumn(employee.LastSeen, '80px')
        ), ',')}

# BodyColumn(text, width)
-```
{
    "type": "Column",
    "width": "${width}",
    "items": [
        {
            "type": "TextBlock",
            "text": "${if(text != null && text != '', text, 'â€”')}",
            "wrap": true,
            "size": "Small"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# ClientColumn(clients, width)
-```
{
    "type": "Column",
    "width": "${width}",
    "items": [
        ${join(select(clients, client => TextBlock(client)), ',')}
    ],
    "verticalContentAlignment": "Center"
}
```

# TextBlock(text)
-```
{
    "type": "TextBlock",
    "text": "${if(text != null && text != '', text, 'â€”')}",
    "wrap": true,
    "size": "Small"
}
```

# ImageColumn(url)
-```
{
    "type": "Column",
    "width": "58px",
    "items": [
        {
            "type": "Image",
            "url": "${url}",
            "width": "17px",
            "height": "17px"
        }
    ],
    "verticalContentAlignment": "Center"
}
```

# NextClient(client, freeDays)
-```
Note: Only free for ${DaysText(freeDays, false)} for the next 28 days. ${ClientInfo(client)}
```

# ClientInfo(client)
- IF: ${ dialog.fromDate == null }
    - ${if(client.type == 3, 'On leave', concat('Working for ', client.name))} - ${client.date}.
- ELSE:
    -

# SendActivity_pArEiW()
[Activity
    Text = ${PeopleNotFound()}
]

# SendActivity_T25WLi()
[Activity
    Text = ${SendActivity_T25WLi_text()}
]

# SendActivity_T25WLi_text()
- Please specify a specific date to query.

# SendActivity_x5sCo7()
[Activity
    Text = ${PeopleNotFound()}
]

# PeopleNotFound
- Sorry, I couldn't find anyone ${Status()}${Date()}.

# Status()
- IF: ${ dialog.booked }
    - on client work
- ELSE:
    - on internal work

# Date()
- IF: ${ turn.formatDate != null }
    - ``` on ${turn.formatDate}```
- ELSE:
    - ``````
